#include <gpiod.h>
#include <stdio.h>
#include <time.h>

#define IN1_CHIP "gpiochip0"
#define IN1_LINE 24
#define IN2_CHIP "gpiochip0"
#define IN2_LINE 23
#define EN_CHIP "gpiochip0"
#define EN_LINE 25

void startMotor(int direction);
void setSpeed(int speed);
void stopMotor();

int main(void) {
    struct gpiod_chip *chip;
    struct gpiod_line *in1, *in2, *en;

    // Open GPIO chip
    chip = gpiod_chip_open_by_name(IN1_CHIP);
    if (!chip) {
        perror("Failed to open GPIO chip");
        return 1;
    }

    // Request GPIO lines
    in1 = gpiod_chip_get_line(chip, IN1_LINE);
    in2 = gpiod_chip_get_line(chip, IN2_LINE);
    en = gpiod_chip_get_line(chip, EN_LINE);

    if (!in1 || !in2 || !en) {
        perror("Failed to request GPIO lines");
        return 1;
    }

    // Set GPIO line directions
    gpiod_line_request_output(in1, "motor_in1", 0);
    gpiod_line_request_output(in2, "motor_in2", 0);
    gpiod_line_request_output(en, "motor_en", 0);

    // ... (rest of your code using gpiod_line_set_value functions)
}

void startMotor(int direction) {
    if (direction == 1) {
        gpiod_line_set_value(in1, 1);
        gpiod_line_set_value(in2, 0);
        printf("Forward\n");
}

void setSpeed(int speed) {
    const struct timespec pwm_period = {0, 10000000};  // 10ms period
    const struct timespec on_time = {0, speed * 10000};   // Adjust for desired duty cycle

    while (1) {
        gpiod_line_set_value(en, 1);
        nanosleep(&on_time, NULL);
        gpiod_line_set_value(en, 0);
        nanosleep(&pwm_period, NULL);
    }
}
void stopMotor() {
    gpiod_line_set_value(in1, 0);
    gpiod_line_set_value(in2, 0);
    gpiod_line_set_value(en, 0);
    printf("Motor stopped\n");
}
