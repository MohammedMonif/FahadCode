#include <gpiod.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define IN1_CHIP "gpiochip0"
#define IN1_LINE 24
#define IN2_CHIP "gpiochip0"
#define IN2_LINE 23
#define EN_CHIP "gpiochip0"
#define EN_LINE 25

// Function prototypes
void startMotor(struct gpiod_line *in1, struct gpiod_line *in2);
void setSpeed(int speed, struct gpiod_line *en);
void stopMotor(struct gpiod_line *in1, struct gpiod_line *in2, struct gpiod_line *en);

// Define GPIO path for PWM control
#define PWM_PATH "/sys/class/gpio/gpio%d/"

// Function to export a GPIO pin
void exportGPIO(int pin);

// Function to write a value to a GPIO pin
void writeGPIO(int pin, int value);

int main(void) {
    struct gpiod_chip *chip;
    struct gpiod_line *in1, *in2, *en;

    // Open GPIO chip
    chip = gpiod_chip_open_by_name(IN1_CHIP);
    if (!chip) {
        perror("Failed to open GPIO chip");
        return 1;
    }

    // Request GPIO lines
    in1 = gpiod_chip_get_line(chip, IN1_LINE);
    in2 = gpiod_chip_get_line(chip, IN2_LINE);
    en = gpiod_chip_get_line(chip, EN_LINE);

    if (!in1 || !in2 || !en) {
        perror("Failed to request GPIO lines");
        return 1;
    }

    // Set GPIO line directions
    gpiod_line_request_output(in1, "motor_in1", 0);
    gpiod_line_request_output(in2, "motor_in2", 0);
    gpiod_line_request_output(en, "motor_en", 0);

    // Initialize GPIO values
    gpiod_line_set_value(in1, 0);
    gpiod_line_set_value(in2, 0);
    gpiod_line_set_value(en, 0);

    printf("\n");
    printf("The default speed of the motor is LOW & Forward.....\n");
    printf("r-run l-low h-high e-exit\n");
    printf("\n");

    while (1) {
        char x;
        if (scanf(" %c", &x) != 1) {
            // Handle invalid input
            printf("Invalid input. Exiting...\n");
            break;
        }

        if (x == 'r') {
            startMotor(in1, in2);
        } else if (x == 'l' || x == 'h') {
            int speed = (x == 'l') ? 25 : 75;
            setSpeed(speed, en);
        } else if (x == 'e') {
            stopMotor(in1, in2, en);
            printf("GPIO Clean up\n");
            break;  // Exit the loop
        } else {
            printf("<<< wrong data >>>\n");
            printf("please enter the defined data to continue.....\n");
        }
    }

    // Cleanup GPIO resources
    gpiod_line_release(in1);
    gpiod_line_release(in2);
    gpiod_line_release(en);
    gpiod_chip_close(chip);

    return 0;
}

// Function definitions

void startMotor(struct gpiod_line *in1, struct gpiod_line *in2) {
    gpiod_line_set_value(in1, 1);
    gpiod_line_set_value(in2, 0);
    printf("Forward\n");
}

void setSpeed(int speed, struct gpiod_line *en) {
    // Ensure the speed is within the valid range
    if (speed < 0) {
        speed = 0;
    } else if (speed > 100) {
        speed = 100;
    }

    // Map the speed to the PWM range (0 to 1023)
    int pwmValue = (speed * 1023) / 100;

    // Set PWM duty cycle
    char pwmPath[50];
    sprintf(pwmPath, PWM_PATH, gpiod_line_offset(en));
    exportGPIO(gpiod_line_offset(en));
    writeGPIO(gpiod_line_offset(en), 1); // Enable PWM

    FILE *pwmFile = fopen(strcat(pwmPath, "duty_cycle"), "w");
    if (!pwmFile) {
        perror("Error opening PWM duty_cycle file");
        return;
    }

    fprintf(pwmFile, "%d", pwmValue);
    fclose(pwmFile);

    printf("Speed set to %d%%\n", speed);
}

void exportGPIO(int pin) {
    FILE *exportFile = fopen("/sys/class/gpio/export", "w");
    if (!exportFile) {
        perror("Error opening export file");
        exit(EXIT_FAILURE);
    }

    fprintf(exportFile, "%d", pin);
    fclose(exportFile);
}

void writeGPIO(int pin, int value) {
    char gpioPath[50];
    sprintf(gpioPath, "/sys/class/gpio/gpio%d/value", pin);

    FILE *gpioFile = fopen(gpioPath, "w");
    if (!gpioFile) {
        perror("Error opening GPIO value file");
        exit(EXIT_FAILURE);
    }

    fprintf(gpioFile, "%d", value);
    fclose(gpioFile);
}

void stopMotor(struct gpiod_line *in1, struct gpiod_line *in2, struct gpiod_line *en) {
    gpiod_line_set_value(in1, 0);
    gpiod_line_set_value(in2, 0);
    gpiod_line_set_value(en, 0);
    printf("Motor stopped\n");
}
