#include <wiringPi.h>
#include <stdio.h>

// Define GPIO pins for motor control
const int IN1 = 24;
const int IN2 = 23;
const int ENA = 25;

// Function to start the motor forward
void startMotor() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
}

// Function to set the motor speed
void setSpeed(int speed) {
  pwmWrite(ENA, speed);
}

// Function to stop the motor
void stopMotor() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
}

int main() {
  wiringPiSetup();

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);

  char choice;

  while (1) { // Loop indefinitely
    printf("Press r for forward, h for high speed, l for low speed, e for stop and exit: ");
    scanf(" %c", &choice);

    if (choice == 'r') {
      startMotor();
      printf("Motor started forward\n");
    } else if (choice == 'h') {
      setSpeed(255);  // Adjust high speed value as needed
      printf("Motor set to high speed\n");
    } else if (choice == 'l') {
      setSpeed(50);   // Adjust low speed value as needed
      printf("Motor set to low speed\n");
    } else if (choice == 'e') {
      stopMotor();
      printf("Motor stopped\n");
      return 0; // Exit the program
    } else {
      printf("Invalid choice\n");
    }
  }

  return 0;
}
// Function prototypes
void startMotor(struct gpiod_line *in1, struct gpiod_line *in2);
void setSpeed(int speed, struct gpiod_line *en);
void stopMotor(struct gpiod_line *in1, struct gpiod_line *in2, struct gpiod_line *en);

int main(void) {
    struct gpiod_chip *chip;
    struct gpiod_line *in1, *in2, *en;

    // Open GPIO chip
    chip = gpiod_chip_open_by_name(IN1_CHIP);
    if (!chip) {
        perror("Failed to open GPIO chip");
        return 1;
    }

    // Request GPIO lines
    in1 = gpiod_chip_get_line(chip, IN1_LINE);
    in2 = gpiod_chip_get_line(chip, IN2_LINE);
    en = gpiod_chip_get_line(chip, EN_LINE);

    if (!in1 || !in2 || !en) {
        perror("Failed to request GPIO lines");
        return 1;
    }

    // Set GPIO line directions
    gpiod_line_request_output(in1, "motor_in1", 0);
    gpiod_line_request_output(in2, "motor_in2", 0);
    gpiod_line_request_output(en, "motor_en", 0);

    // Initialize GPIO values
    gpiod_line_set_value(in1, 0);
    gpiod_line_set_value(in2, 0);
    gpiod_line_set_value(en, 0);

    printf("\n");
    printf("The default speed of the motor is LOW & Forward.....\n");
    printf("r-run l-low h-high e-exit\n");
    printf("\n");

    while (1) {
        char x;
        scanf(" %c", &x);

        if (x == 'r') {
            startMotor(in1, in2);
        } else if (x == 'l' || x == 'h') {
            int speed = (x == 'l') ? 25 : 75;
            setSpeed(speed, en);
        } else if (x == 'e') {
            stopMotor(in1, in2, en);
            printf("GPIO Clean up\n");
            break;  // Exit the loop
        } else {
            printf("<<< wrong data >>>\n");
            printf("please enter the defined data to continue.....\n");
        }
    }

    // Cleanup GPIO resources
    gpiod_line_release(in1);
    gpiod_line_release(in2);
    gpiod_line_release(en);
    gpiod_chip_close(chip);

    return 0;
}

// Function definitions

void startMotor(struct gpiod_line *in1, struct gpiod_line *in2) {
    gpiod_line_set_value(in1, 1);
    gpiod_line_set_value(in2, 0);
    printf("Forward\n");
}

void setSpeed(int speed, struct gpiod_line *en) {
    // Set PWM duty cycle directly
    gpiod_line_set_value(en, 1);
    usleep(speed * 1000);  // Sleep based on the speed (in milliseconds)
    gpiod_line_set_value(en, 0);
}

void stopMotor(struct gpiod_line *in1, struct gpiod_line *in2, struct gpiod_line *en) {
    gpiod_line_set_value(in1, 0);
    gpiod_line_set_value(in2, 0);
    gpiod_line_set_value(en, 0);
    printf("Motor stopped\n");
}
