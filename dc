#include <gpiod.h>
#include <stdio.h>
#include <time.h>
#include <pthread.h>

#define IN1_CHIP "gpiochip0"
#define IN1_LINE 24
#define IN2_CHIP "gpiochip0"
#define IN2_LINE 23
#define EN_CHIP "gpiochip0"
#define EN_LINE 25

// Function prototypes
void startMotor(struct gpiod_line *in1, struct gpiod_line *in2);
void setSpeed(int speed, struct gpiod_line *en);
void stopMotor(struct gpiod_line *in1, struct gpiod_line *in2, struct gpiod_line *en);
void *setSpeedThread(void *arg);

int main(void) {
    struct gpiod_chip *chip;
    struct gpiod_line *in1, *in2, *en;

    // Open GPIO chip
    chip = gpiod_chip_open_by_name(IN1_CHIP);
    if (!chip) {
        perror("Failed to open GPIO chip");
        return 1;
    }

    // Request GPIO lines
    in1 = gpiod_chip_get_line(chip, IN1_LINE);
    in2 = gpiod_chip_get_line(chip, IN2_LINE);
    en = gpiod_chip_get_line(chip, EN_LINE);

    if (!in1 || !in2 || !en) {
        perror("Failed to request GPIO lines");
        return 1;
    }

    // Set GPIO line directions
    gpiod_line_request_output(in1, "motor_in1", 0);
    gpiod_line_request_output(in2, "motor_in2", 0);
    gpiod_line_request_output(en, "motor_en", 0);

    // Initialize GPIO values
    gpiod_line_set_value(in1, 0);
    gpiod_line_set_value(in2, 0);
    gpiod_line_set_value(en, 0);

    printf("\n");
    printf("The default speed of the motor is LOW & Forward.....\n");
    printf("r-run l-low h-high e-exit\n");
    printf("\n");

    while (1) {
        char x;
        scanf(" %c", &x);

        if (x == 'r') {
            startMotor(in1, in2);
        } else if (x == 'l' || x == 'h') {
            int speed = (x == 'l') ? 25 : 75;
            setSpeed(speed, en);
        } else if (x == 'e') {
            stopMotor(in1, in2, en);
            printf("GPIO Clean up\n");
            break;  // Exit the loop
        } else {
            printf("<<< wrong data >>>\n");
            printf("please enter the defined data to continue.....\n");
        }
    }

    // Cleanup GPIO resources
    gpiod_line_release(in1);
    gpiod_line_release(in2);
    gpiod_line_release(en);
    gpiod_chip_close(chip);

    return 0;
}

// Function definitions

void startMotor(struct gpiod_line *in1, struct gpiod_line *in2) {
    gpiod_line_set_value(in1, 1);
    gpiod_line_set_value(in2, 0);
    printf("Forward\n");
}

void setSpeed(int speed, struct gpiod_line *en) {
    // Threaded PWM implementation for speed control
    pthread_t thread;
    pthread_create(&thread, NULL, setSpeedThread, &speed);
}

void stopMotor(struct gpiod_line *in1, struct gpiod_line *in2, struct gpiod_line *en) {
    gpiod_line_set_value(in1, 0);
    gpiod_line_set_value(in2, 0);
    gpiod_line_set_value(en, 0);
    printf("Motor stopped\n");
}

// Thread function for PWM generation
void *setSpeedThread(void *arg) {
    int *speed = (int *)arg;
    // ... (same PWM logic as before)
    return NULL;
}
